use directory::microstatus::{DirectoryAuthority, DirSource, Entry, Flag, Preamble};

use std::collections::{HashMap};
use std::net::{Ipv4Addr};
use time::{strptime, Tm};

/********************
 *                  *
 * Building blocks. *
 *                  *
 ********************/
/*
 * Basics
 */
NL          = "\n"
SP          = " "
TAB         = "\t"
dot         = "."
hyphen      = "-"
minus       = "-"
comma       = ","
colon       = ":"
equal       = "="
underscore  = "_"
one         = "1"
lowercase   = [a-z]
uppercase   = [A-Z]
letters     = [a-zA-Z]
digit       = [0-9]
alphanum    = [a-zA-Z0-9]
base64      = [a-zA-Z0-9+/]
hex         = [a-fA-F0-9]
/*
 * Date/time
 */
year            = digit{4}
month           = digit{2}
day             = digit{2}
hour            = digit{2}
minute          = digit{2}
second          = digit{2}
time_seq        = hour colon minute colon second
date_seq        = year hyphen month hyphen day
date_time_seq   = date_seq SP time_seq
/*
 * IP address and hostname stuff
 */
ipv4_octet  = digit{1,3}
ipv4_addr   = ((ipv4_octet "."){3} ipv4_octet)
/*
 * Recognized Flags
 */
authority_flag  = "Authority"
badexit_flag    = "BadExit"
exit_flag       = "Exit"
fast_flag       = "Fast"
guard_flag      = "Guard"
hsdir_flag      = "HSDir"
named_flag      = "Named"
stable_flag     = "Stable"
running_flag    = "Running"
unnamed_flag    = "Unnamed"
valid_flag      = "Valid"
v2dir_flag      = "V2Dir"
known_flags
    = (authority_flag   /
       badexit_flag     /
       exit_flag        /
       fast_flag        /
       guard_flag       /
       hsdir_flag       /
       named_flag       /
       stable_flag      /
       running_flag     /
       valid_flag       /
       v2dir_flag)
/*
 * Stuff from dir-spec
 */
Document = (Item / NL)+
Item = KeywordLine Object*
KeywordLine = (Keyword NL/Keyword WS ArgumentChar+ NL)
Keyword = KeywordChar+
KeywordChar = (alphanum/hyphen)
ArgumentChar = [ -~]
WS = (SP/TAB)+
Object = BeginLine base64+ EndLine
BeginLine = "-----BEGIN " Keyword "-----" NL
EndLine = "-----END " Keyword "-----" NL

/********************
 *                  *
 * Micro consensus. *
 *                  *
 ********************/
/*
 * Preamble
 */
#[export]
micro_status_preamble -> Preamble
    = p_version_line
      p_vote_status_line
      a:p_method_line
      b:p_valid_after_line
      c:p_fresh_until_line
      d:p_valid_until_line
      e:p_voting_delay_line
      f:p_client_versions_line?
      g:p_server_versions_line?
      h:p_known_flags_line
      i:p_params_line? {
        
        Preamble {
            method:             a,
            valid_after:        b,
            fresh_until:        c,
            valid_until:        d,
            voting_delay:       e,
            client_versions:    f,
            server_versions:    g,
            known_flags:        h,
            params:             i,
        }
      }

// consensus version line
p_version_line
    = "network-status-version" SP "3" SP "microdesc" NL

// vote-status line
p_vote_status_line
    = "vote-status" SP "consensus" NL

// method line
p_method_line -> u32
    = "consensus-method" SP m:ns_method NL { m }

ns_method -> u32
    = digit+ { match_str.parse().unwrap() }

// valid-after line
p_valid_after_line -> Tm
    = "valid-after" SP v:valid_after_date_time NL { v }

valid_after_date_time -> Tm
    = date_time_seq { strptime(match_str, "%Y-%m-%d %H:%M:%S").unwrap() }

// fresh-until line
p_fresh_until_line -> Tm
    = "fresh-until" SP f:fresh_until_date_time NL { f }

fresh_until_date_time -> Tm
    = date_time_seq { strptime(match_str, "%Y-%m-%d %H:%M:%S").unwrap() }

// valid-until line
p_valid_until_line -> Tm
    = "valid-until" SP v:valid_until_date_time NL { v }

valid_until_date_time -> Tm
    = date_time_seq { strptime(match_str, "%Y-%m-%d %H:%M:%S").unwrap() }

// voting-delay line
p_voting_delay_line -> (u32, u32)
    = "voting-delay" SP v:vote_seconds SP d:dist_seconds NL {

        (v, d)
    }

vote_seconds -> u32
    = digit+ { match_str.parse().unwrap() }

dist_seconds -> u32
    = digit+ { match_str.parse().unwrap() }

// client-versions line
p_client_versions_line -> String
    = "client-versions" SP c:client_versions_str NL { c }

// TODO: make this more strict based on version-spec?
// TODO: return Vec<String> instead?
client_versions_str -> String
    = single_version_str ++ comma { match_str.to_string() }

single_version_str
    = (digit/"."/hyphen/lowercase)+

// server-versions line
p_server_versions_line -> String
    = "server-versions" SP s:server_versions_str NL { s }

// TODO: make this more strict based on version-spec?
// TODO: return Vec<String>?
server_versions_str -> String
    = single_version_str ++ comma { match_str.to_string() }

// known-flags line
p_known_flags_line -> Vec<String>
    = "known-flags" SP k:known_flags_list NL { k }

known_flags_list -> Vec<String>
    = f:flag_str ++ SP { f }

flag_str -> String
    = (letters/digit)+ { match_str.to_string() }

// params line
p_params_line -> HashMap<String, i32>
    = "params" SP p:params_list NL {
        
        // TODO: intelligently use with_capacity()
        let mut h: HashMap<String, i32> = HashMap::new();

        for i in p.into_iter() {
            h.insert(i.0, i.1);
        }
        
        h
    }

params_list -> Vec<(String, i32)>
    = param_key_equal_value ++ SP

param_key_equal_value -> (String, i32)
    = k:param_key equal v:param_value { (k, v) }

param_key -> String
    = (alphanum/underscore)+ { match_str.to_string() }

param_value -> i32
    = minus? digit+ { match_str.parse().unwrap() }
/*
 * Authority Section
 */
#[export]
micro_status_authority -> DirSource
    = a:a_dir_source_line
      b:a_contact_line
      c:a_vote_digest_line {
        
        DirSource {
            authority: DirectoryAuthority {
                           nickname:    a.0,
                           identity:    a.1,
                           address:     a.2,
                           ip:          a.3,
                           dirport:     a.4,
                           orport:      a.5,
                           contact:     b,
                      },

            vote_digest: c,
        }
    }

// dir-source line
a_dir_source_line -> (String, String, String, Ipv4Addr, u16, u16)
    = "dir-source" SP
      a:a_nickname SP
      b:a_identity SP
      c:a_address SP
      d:a_ip SP
      e:a_dirport SP
      f:a_orport NL {
        
        (a, b, c, d, e, f)

      }

a_nickname -> String
    = alphanum+ { match_str.to_string() }

a_identity -> String
    = base64+ { match_str.to_string() }

// TODO: match only valid hostnames/ips
a_address -> String
    = ([a-z]/[A-Z]/[0-9]/[-.])* { match_str.to_string() }

a_ip -> Ipv4Addr
    = ipv4_addr { 
        let addr: Ipv4Addr = match_str.parse().unwrap();
        addr
    }

a_orport -> u16
    = digit+ { match_str.parse().unwrap() }

a_dirport -> u16
    = digit+ { match_str.parse().unwrap() }
// contact line
a_contact_line -> String
    = "contact" SP a:a_contact NL { a }

// TODO: any printable ascii goes here?
a_contact -> String
    = ArgumentChar+ { match_str.to_string() }
// vote-digest line
a_vote_digest_line -> String
    = "vote-digest" SP v:vote_digest NL { v }

vote_digest -> String
    = hex+ { match_str.to_string() }
/*
 * Micro Status Entry
 */

#[export]
micro_status_entry -> Entry
   = r:r_line_micro
     m:m_line_micro
     s:s_line_micro
     v:v_line_micro?
     w:w_line_micro? {

        // TODO: clean this up
        let wv: (Option<u32>, Option<bool>) = match w {
            Some(v) => (Some(v.0), v.1),
            None    => (None, None),
        };

        Entry {
            nickname:       r.0,
            identity:       r.1,
            publication:    r.2,
            ip:             r.3,
            orport:         r.4,
            dirport:        r.5,
            digest:         m,
            flags:          s,
            version:        v,
            bandwidth:      wv.0,
            unmeasured:     wv.1,
        }
    }

/*
 * 'r' line components
 */
r_line_micro -> (String, String, Tm, Ipv4Addr, u32, u32)
    = "r" SP
      n:nickname SP
      i:identity SP
      p:publication SP
      ip:IP SP
      op:ORPort SP
      dp:DirPort NL {
        
        (n, i, p, ip, op, dp)
    }

nickname -> String
    = alphanum+ { match_str.to_string() }

identity -> String
    = base64+ { match_str.to_string() }

publication -> Tm
    = date_time_seq { strptime(match_str, "%Y-%m-%d %H:%M:%S").unwrap() }

IP -> Ipv4Addr
    = ipv4_addr { 
        let addr: Ipv4Addr = match_str.parse().unwrap();
        addr
    }

ORPort -> u32
    = digit+ { match_str.parse().unwrap() }

DirPort -> u32
    = digit+ { match_str.parse().unwrap() }
// 'm' line components
m_line_micro -> String
    = "m" SP d:digest NL { d }

digest -> String
    = base64+ { match_str.to_string() }
// 's' line components
s_line_micro -> Vec<Flag>
    = "s" SP f:Flags NL {
        let all = f.split(" ");
        let cap = match all.size_hint().1 {
            Some(v) => v,
            None => 0,
        };
        let mut v: Vec<Flag> = Vec::with_capacity(cap);

        for i in all {
            match i {
                "Authority" => v.push(Flag::Authority),
                "BadExit" => v.push(Flag::BadExit),
                "Exit" => v.push(Flag::Exit),
                "Fast" => v.push(Flag::Fast),
                "Guard" => v.push(Flag::Guard),
                "HSDir" => v.push(Flag::HSDir),
                "Named" => v.push(Flag::Named),
                "Stable" => v.push(Flag::Stable),
                "Running" => v.push(Flag::Running),
                "Valid" => v.push(Flag::Valid),
                "V2Dir" => v.push(Flag::V2Dir),
                _ => unreachable!("Unrecognized flag."),
            }
        }

        v
    }

// TODO: use delim notation and return Vec<&str>
Flags -> &'input str
    = (known_flags/SP)* { match_str }
// 'v' line components
v_line_micro -> String
    = "v" SP v:version NL { v.to_string() }

version -> &'input str
    = (uppercase/lowercase/digit/SP/dot/hyphen)* { match_str }
// 'w' line components
w_line_micro -> (u32, Option<bool>)
    = "w" SP b:Bandwidth SP? u:Unmeasured? NL { (b, u) }

Bandwidth -> u32
    = "Bandwidth" equal b:bval { b }

bval -> u32
    = digit+ { match_str.parse::<u32>().unwrap() }

Unmeasured -> bool
    = "Unmeasured" equal one { true }
